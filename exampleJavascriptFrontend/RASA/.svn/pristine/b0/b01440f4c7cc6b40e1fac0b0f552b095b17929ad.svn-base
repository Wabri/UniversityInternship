/**
 * homepageCtrl : controller home page
 * @type {[type]}
 */
angular.module(APP_NAME)
  .controller('interviewCtrl', interviewCtrl);

/**
 * [interviewCtrl description]
 * @method interviewCtrl
 * @param  {[type]}     EVENTS [description]
 * @return {[type]}            [description]
 */
function interviewCtrl($scope, $rootScope, $q, $timeout, $http, $mdDialog, $translate, FileUploader, bvApiService, bvAlertService, bvBusyService, EVENTS) {


  //////////////////////////////////
  var uploader = $scope.uploader = new FileUploader({
    url: 'upload.php'
  });

  // FILTERS

  uploader.filters.push({
    name: 'imageFilter',
    fn: function(item /*{File|FileLikeObject}*/ , options) {
      var type = '|' + item.type.slice(item.type.lastIndexOf('/') + 1) + '|';
      return '|jpg|png|jpeg|bmp|gif|'.indexOf(type) !== -1;
    }
  });

  // CALLBACKS

  uploader.onWhenAddingFileFailed = function(item /*{File|FileLikeObject}*/ , filter, options) {
    console.info('onWhenAddingFileFailed', item, filter, options);
  };
  uploader.onAfterAddingFile = function(fileItem) {
    console.info('onAfterAddingFile', fileItem);
  };
  uploader.onAfterAddingAll = function(addedFileItems) {
    console.info('onAfterAddingAll', addedFileItems);
  };
  uploader.onBeforeUploadItem = function(item) {
    console.info('onBeforeUploadItem', item);
  };
  uploader.onProgressItem = function(fileItem, progress) {
    console.info('onProgressItem', fileItem, progress);
  };
  uploader.onProgressAll = function(progress) {
    console.info('onProgressAll', progress);
  };
  uploader.onSuccessItem = function(fileItem, response, status, headers) {
    console.info('onSuccessItem', fileItem, response, status, headers);
  };
  uploader.onErrorItem = function(fileItem, response, status, headers) {
    console.info('onErrorItem', fileItem, response, status, headers);
  };
  uploader.onCancelItem = function(fileItem, response, status, headers) {
    console.info('onCancelItem', fileItem, response, status, headers);
  };
  uploader.onCompleteItem = function(fileItem, response, status, headers) {
    console.info('onCompleteItem', fileItem, response, status, headers);
  };
  uploader.onCompleteAll = function() {
    console.info('onCompleteAll');
  };

  console.info('uploader', uploader);


  //////////////////////////////
  // bp
  var vm = this;
  vm.project = {

  };

  vm.data = {};

  vm.checked2 = 'vittima';
  vm.checked = 'no';
  vm.checked3 = 'persone del posto';

  vm.makeSnapshot = makeSnapshot;

  vm.captured = false;

  var _video = null,
    patData = null;

  vm.patOpts = {
    x: 0,
    y: 0,
    w: 25,
    h: 25
  };

  // Setup a channel to receive a video property
  // with a reference to the video element
  // See the HTML binding in main.html
  vm.channel = {};

  vm.webcamError = false;
  vm.onError = onError;

  function onError(err) {
    $scope.$apply(
      function() {
        vm.webcamError = err;
      }
    );
  };
  vm.onSuccess = onSuccess;

  function onSuccess() {
    // The video element contains the captured camera data
    _video = vm.channel.video;
    $scope.$apply(function() {
      vm.patOpts.w = _video.width;
      vm.patOpts.h = _video.height;
      //$scope.showDemos = true;
    });
  };

  vm.onStream = onStream;

  function onStream(stream) {
    // You could do something manually with the stream.
  };

  function makeSnapshot() {
    if (_video) {
      var patCanvas = document.querySelector('#snapshot');
      if (!patCanvas) return;

      patCanvas.width = _video.width;
      patCanvas.height = _video.height;
      var ctxPat = patCanvas.getContext('2d');
      var idata = getVideoData(vm.patOpts.x, vm.patOpts.y, vm.patOpts.w, vm.patOpts.h);
      ctxPat.putImageData(idata, 0, 0);

      vm.sendSnapshotToServer(patCanvas.toDataURL());

      patData = idata;
      vm.captured = true;
    }
  };


  /**
   * Redirect the browser to the URL given.
   * Used to download the image by passing a dataURL string
   */
  vm.downloadSnapshot = downloadSnapshot;

  function downloadSnapshot(dataURL) {
    window.location.href = dataURL;
  };

  vm.getVideoData = getVideoData;

  function getVideoData(x, y, w, h) {
    var hiddenCanvas = document.createElement('canvas');
    hiddenCanvas.width = _video.width;
    hiddenCanvas.height = _video.height;
    var ctx = hiddenCanvas.getContext('2d');
    ctx.drawImage(_video, 0, 0, _video.width, _video.height);
    return ctx.getImageData(x, y, w, h);
  };

  /**
   * This function could be used to send the image data
   * to a backend server that expects base64 encoded images.
   *
   * In this example, we simply store it in the scope for display.
   */
  vm.sendSnapshotToServer = sendSnapshotToServer;

  function sendSnapshotToServer(imgBase64) {
    vm.snapshotData = imgBase64;
  };


  /////////////////////////////////////////////////////////
  vm.downloadCanvas = downloadCanvas;

  function downloadCanvas(link, canvasId, filename) {
    link.href = document.getElementById('snapshot').toDataURL();
    link.download = filename;
  }

  /**
   * The event handler for the link's onclick event. We give THIS as a
   * parameter (=the link element), ID of the canvas and a filename.
   */
  document.getElementById('download').addEventListener('click', function() {
    vm.downloadCanvas(this, 'canvas', 'test.png');
  }, false);

  ////////////////////////////////////////////////




}

/**
 * The ng-thumb directive
 * @author: nerv
 * @version: 0.1.2, 2014-01-09
 */
angular.module(APP_NAME)
  .directive('ngThumb', ['$window', function($window) {
    var helper = {
      support: !!($window.FileReader && $window.CanvasRenderingContext2D),
      isFile: function(item) {
        return angular.isObject(item) && item instanceof $window.File;
      },
      isImage: function(file) {
        var type = '|' + file.type.slice(file.type.lastIndexOf('/') + 1) + '|';
        return '|jpg|png|jpeg|bmp|gif|'.indexOf(type) !== -1;
      }
    };

    return {
      restrict: 'A',
      template: '<canvas/>',
      link: function(scope, element, attributes) {
        if (!helper.support) return;

        var params = scope.$eval(attributes.ngThumb);

        if (!helper.isFile(params.file)) return;
        if (!helper.isImage(params.file)) return;

        var canvas = element.find('canvas');
        var reader = new FileReader();

        reader.onload = onLoadFile;
        reader.readAsDataURL(params.file);

        function onLoadFile(event) {
          var img = new Image();
          img.onload = onLoadImage;
          img.src = event.target.result;
        }

        function onLoadImage() {
          var width = params.width || this.width / this.height * params.height;
          var height = params.height || this.height / this.width * params.width;
          canvas.attr({
            width: width,
            height: height
          });
          canvas[0].getContext('2d').drawImage(this, 0, 0, width, height);
        }
      }
    };
  }]);
