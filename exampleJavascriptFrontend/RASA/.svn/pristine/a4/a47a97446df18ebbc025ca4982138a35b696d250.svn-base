(function () {
    'use strict';

    angular.module('revux')
        .directive('selectMultiAccount', selectMultiAccount);

    /**
     * selectMultiAccount
     * @returns {{templateUrl: string, restrict: string, replace: boolean, controller: controller, controllerAs: string, scope: {datasource: string, filterid: string, label: string, includeName: string, isReady: string}}}
     */
    function selectMultiAccount() {

        // MOTODI dal PADRE
        // getSelected = ritorna array con selezionati

        // METODI su PADRE
        // onChanged(selections) = selections comprende tutte le selezioni

        var directive = {
            templateUrl: 'common/directives/selectMultiAccount/selectMultiAccount.html',
            restrict: 'E',
            replace: true,
            controller: controller,
            controllerAs: 'ctrl',
            bindToController: true,
            scope: {
                label: '=',
                filterid: '=',
                isDisabled: '=?',
                isPromiseReady: '=?',
                api: '=?'
            }
        };

        return directive;

        /**
         * controller : cuore pulsante
         * @param $scope
         * @param Events
         * @param $window
         * @param $translate
         */
        function controller($scope, Events, $window, $translate) {

            //bp
            var vm = this;

            vm.addFilter = addFilter;
            vm.removeFilter = removeFilter;
            vm.toggleFilter = toggleFilter;
            vm.onBlur = function () {

                // se non è aperto , vai via
                if (vm.open === false) return;

                // non più aperto e rimetti le cose come stavano prima
                vm.open = false;
                vm.datasource = angular.copy(vm.dsBeforeOpen);
                vm.query = "";
            };

            // interfaccia
            vm.window = $window;

            // altri
            vm.dsBeforeOpen = [];   //mb
            vm.selections = [];

            // tratta API
            if (vm.api) {
                vm.api.setDatasource = setDatasource;
                vm.api.getSelected = getSelected;
                vm.api.isReady = function () {
                    return true;
                }
            }

            // adesso la direttiva è pronta !!!
            if (vm && vm.isPromiseReady && vm.isPromiseReady.promise) {
                vm.isPromiseReady.resolve();
            }

            // predispone il datasource
            /*
             $scope.$watch(function () {
             return vm.datasource;
             }, function (newValue, oldValue) {
             if (newValue !== oldValue) {
             angular.forEach(vm.datasource, function (value) {
             value.isChecked = false;
             });

             }
             }, true);
             */
            // watcher per vedere cambiamenti selezione
            $scope.$watch(function () {
                return vm.selections[0];
            }, function (newValue, oldValue) {
                if (newValue !== oldValue) {
                    var items = vm.selections[0].length;
                    if (items > 0) {
                        if (items === 1)
                            vm.selectedCount = items + $translate.instant("customer.selected");
                        else
                            vm.selectedCount = items + $translate.instant("customers.selected");
                    } else
                        vm.selectedCount = ""
                }
            }, true);

            /**
             * addFilter : aggiunge
             */
            function addFilter() {

                var ds = angular.copy(vm.datasource);
                var objValues = ds.filter(function (itm) {
                    return itm.isChecked;
                }).map(function (itm) {
                    delete itm.isChecked;
                    if (vm.label && vm.includeName) itm.name = $translate.instant(vm.label);
                    return itm;
                });

                // applica al riepilogo
                vm.selections = [];
                vm.selections.push(objValues);

                // se il padre ha questo metodo, lo chiama
                if (vm.api.onChanged)
                    vm.api.onChanged(angular.copy(vm.selections));

                // non più aperto
                vm.open = false; // mb
            }

            /**
             *
             */
            function toggleFilter() {       // mb

                if (!vm.open) {
                    vm.query = "";

                    // salva il datasource prima di aprire la finestra
                    vm.dsBeforeOpen = angular.copy(vm.datasource);

                } else {
                    // rimette sempre il ds cosi come era impostato prima di aprire
                    vm.datasource = angular.copy(vm.dsBeforeOpen);
                    vm.query = "";
                }

                // aperto / chiuso
                vm.open = !vm.open;
            }

            /**
             *
             * @param key
             * @param value
             * @returns {boolean}
             */
            function removeFilter(key, value) {

                //remove item from local array
                vm.selections[key].splice(vm.selections[key].indexOf(value), 1);

                //console.log('data ', data);
                vm.datasource.filter(function (obj) {
                    return obj.id === value.id;
                }).map(function (itm) {
                    delete itm.isChecked;
                    return itm;
                });

                vm.open = false;

                // se il padre ha questo metodo, lo chiama
                if (vm.api.onChanged)
                    vm.api.onChanged(angular.copy(vm.selections));
            }

            /**
             *
             * @returns {Array}
             */
            function getSelected() {
                if (vm.selections && vm.selections[0])
                    return vm.selections[0];
                else
                    return null;
            }

            function setDatasource(value) {
                vm.datasource = value;
            }

            /**
             * quando riceve un close filter, si deve chiudere
             */
            $scope.$on(Events.CLOSE_FILTER, function () {

                // chiude
                if (vm.open) {
                    vm.datasource = angular.copy(vm.dsBeforeOpen);
                    vm.open = false;
                }
            });
        }
    }

})();
