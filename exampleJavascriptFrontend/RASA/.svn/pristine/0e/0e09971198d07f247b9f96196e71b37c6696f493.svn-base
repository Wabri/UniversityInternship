(function () {
    'use strict';

    angular.module('revux')
        .directive('higherLowerThan', higherLowerThan);

    /**
     *
     * @returns {{require: string, link: link}}
     */
    function higherLowerThan(LanguageService) {

        function link ($scope, $element, $attrs, ctrl) {

            function validate  (viewValue) {

                var comparisonModelA = $attrs.comparisonModelA;
                var comparisonModelB = $attrs.comparisonModelB;
                var comparisonType = $attrs.comparisonType
                var validityType = "higherLowerThan";

                var t, f;

                // finisce di comporre lil ritorno di validit√†
                validityType = validityType + comparisonType;

                console.log("viewValue",viewValue )
                console.log("comparisonModelA", comparisonModelA);
                console.log("comparisonModelB", comparisonModelB);
                console.log("comparisonType", comparisonType)

                // controllo delle date
                if (!moment(viewValue, LanguageService.date_format, true).isValid() || !moment(comparisonModel, LanguageService.date_format, true).isValid()) {
                    console.log("AAAA")
                    ctrl.$setValidity(validityType, true);
                    return true;
                }

                console.log("PASSATO")

                // ottiene le date
                var dateFrom = moment(comparisonModel, LanguageService.date_format, true);
                var dateTo = moment(viewValue, LanguageService.date_format, true);

                // stessa data ok
                if (dateTo.isSame(dateFrom)) {
                    ctrl.$setValidity(validityType, true)
                    return true;
                }

                // vero controllo
                if ( comparisonType == "Higher")
                    ctrl.$setValidity(validityType, dateTo.isAfter(dateFrom));
                else
                    ctrl.$setValidity(validityType, dateFrom.isBefore(dateTo));


                // It's valid if model is higher than the model we're comparing against
                return viewValue;
            };

            ctrl.$parsers.unshift(validate);
        };

        return {
            require: 'ngModel',
            link: link
        };
    }
})();