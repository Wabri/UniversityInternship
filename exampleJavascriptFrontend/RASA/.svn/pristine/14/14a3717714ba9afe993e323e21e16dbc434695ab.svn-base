module.exports = function (grunt) {

  // Load grunt tasks automatically
  require('load-grunt-tasks')(grunt);

  grunt.loadNpmTasks('grunt-contrib-jshint');
  grunt.loadNpmTasks('grunt-wiredep');
  grunt.loadNpmTasks('grunt-processhtml');
  grunt.loadNpmTasks('grunt-i18next');
  //grunt.loadNpmTasks('grunt-contrib-compass');

  var config = {
    app: 'app',
    dist: 'dist',
    name: 'skeleton'
  };
  var serveStatic = require('serve-static');

  // Define the configuration for all the tasks
  grunt.initConfig({
    // Project settings

    skeleton: config,

    // Watches files for changes and runs tasks based on the changed files
    watch: {
      concatTranslate: {
        files: ['<%= skeleton.app %>/**/i18n/*.json'],
        tasks: ['clean:l10n', 'i18next:concat']
      },
      bower: {
        files: ['bower.json'],
        tasks: ['wiredep']
      },

      gruntfile: {
        files: ['Gruntfile.js']
      },
      compass: {
        files: ['<%= skeleton.app %>/**/*.{scss,sass}'],
        tasks: ['compass:server', 'postcss:server']
      },
      livereload: {
        options: {
          livereload: '<%= connect.options.livereload %>'
        },
        files: [
          '<%= skeleton.app %>/**/*.html',
          '<%= skeleton.app %>/**/*.js',
          '.tmp/assets/autogenerated/styles/{,*/}*.css',
          '<%= skeleton.app %>/assets/images/{,*/}*'
        ]
      }
    },
    // The actual grunt server settings
    connect: {
      options: {
        port: 9001,
        livereload: 35728,
        hostname: 'localhost'
      },
      livereload: {
        options: {
          open: true,
          //base: [
          //   '.tmp',
          //  '<%= skeleton.app %>'
          //],
          middleware: function (connect, options) {
            return [
              serveStatic('.tmp'),
              connect().use('/bower_components', serveStatic('./bower_components')),
              serveStatic(config.app)
            ];
          }
        }
      },
    },
    /**************  EXTRA OPTIONS  *************/
    // Empties folders to start fresh
    clean: {
      dist: {
        files: [{
          dot: true,
          src: [
            '.tmp',
            '<%= skeleton.dist %>/*'
          ]
        }]
      },
      server: '.tmp',
      l10n: 'app/assets/i18n/*.json'

    },
    // add Bower installed files into index.html
    wiredep: {
      app: {
        src: ['<%= skeleton.app %>/index.html']
      },
      sass: {
        src: ['<%= skeleton.app %>/assets/styles/{,*/}*.{scss,sass}'],
        ignorePath: /(\.\.\/){1,2}bower_components\//
      }
    },
    // Compiles Sass to CSS and generates necessary files if requested
    compass: {
      options: {
        sassDir: '<%= skeleton.app %>/assets/styles',
        cssDir: '<%= skeleton.app %>/assets/autogenerated/styles',
        generatedImagesDir: '.tmp/images/generated',
        imagesDir: '<%= skeleton.app %>/images',
        javascriptsDir: '<%= skeleton.app %>/scripts',
        fontsDir: '<%= skeleton.app %>/assets/styles/fonts',
        importPath: './bower_components',
        httpImagesPath: '/images',
        httpGeneratedImagesPath: '/images/generated',
        httpFontsPath: '/assets/styles/fonts',
        relativeAssets: false,
        assetCacheBuster: false,
        raw: 'Sass::Script::Number.precision = 10\n'
      },
      dist: {
        options: {
          generatedImagesDir: '<%= skeleton.dist %>/images/generated'
        }
      },
      server: {
        options: {
          sourcemap: true
        }
      }
    },
    // Add vendor prefixed styles
    postcss: {
      options: {
        processors: [
          require('autoprefixer')({
            browsers: ['last 1 version']
          })
        ]
      },
      server: {
        options: {
          map: true
        },
        files: [{
          expand: true,
          cwd: '.tmp/assets/autogenerated/styles/',
          src: '{,*/}*.css',
          dest: '.tmp/assets/autogenerated/styles/'
        }]
      },
      dist: {
        files: [{
          expand: true,
          cwd: '.tmp/assets/autogenerated/styles/',
          src: '{,*/}*.css',
          dest: 'app/assets/autogenerated/styles/'
        }]
      }
    },


    // If you want to turn on uglify you will need write your angular code with string-injection based syntax
    // For example this is normal syntax: function exampleCtrl ($scope, $rootScope, $location, $http){}
    // And string-injection based syntax is: ['$scope', '$rootScope', '$location', '$http', function exampleCtrl ($scope, $rootScope, $location, $http){}]
    uglify: {
      options: {
        mangle: false,
        compress: {
          //pure_funcs: [ 'console.log' ]
        }
      }
    },

    // Reads HTML for usemin blocks to enable smart builds that automatically
    // concat, minify and revision files. Creates configurations in memory so
    // additional tasks can operate on them
    useminPrepare: {
      html: '<%= skeleton.app %>/index.html',
      options: {
        dest: '<%= skeleton.dist %>'
      }
    },

    // Performs rewrites based on filerev and the useminPrepare configuration
    usemin: {
      html: ['<%= skeleton.dist %>/{,*/}*.html'],
      css: ['<%= skeleton.dist %>/styles/{,*/}*.css'],
      js: ['<%= skeleton.dist %>/scripts/{,*/}*.js'],
      options: {
        assetsDirs: [
          '<%= skeleton.dist %>',
          '<%= skeleton.dist %>/images',
          '<%= skeleton.dist %>/styles'
        ],
        patterns: {
          js: [
            [/(images\/[^''""]*\.(png|jpg|jpeg|gif|webp|svg))/g, 'Replacing references to images']
          ]
        },
        blockReplacements: {
          css: function (block) {
            return '<link rel="stylesheet" href="' + block.dest + '?v=' + grunt.template.today('isoDateTime') + '"></link>';
          },
          js: function (block) {
            return '<script src="' + block.dest + '?v=' + grunt.template.today('isoDateTime') + '"></script>';
          }
        }
      }
    },

    // Copies remaining files to places other tasks can use
    copy: {
      dist: {
        files: [{
          expand: true,
          dot: true,
          cwd: '<%= skeleton.app %>',
          dest: '<%= skeleton.dist %>',
          src: [
            '*.{ico,png,txt}',
            '**/*.html',
            'assets/fonts/{,*/}*.*',
            'assets/images/**/*.*',
            'assets/i18n/*',
          ]
        }, {
          expand: true,
          cwd: '.tmp/images',
          dest: '<%= skeleton.dist %>/images',
          src: ['generated/*']
        }]
      }
    },

    htmlmin: {
      dist: {
        options: {
          collapseWhitespace: true,
          conservativeCollapse: true,
          collapseBooleanAttributes: true,
          removeCommentsFromCDATA: true
        },
        files: [{
          expand: true,
          cwd: '<%= skeleton.dist %>',
          src: ['{,*/}{,*/}*.html'],
          dest: '<%= skeleton.dist %>'
        }]
      }
    },

    ngtemplates: {
      dist: {
        options: {
          module: 'skeleton',
          htmlmin: '<%= htmlmin.dist.options %>',
          usemin: 'scripts/scripts.js'
        },
        cwd: '<%= skeleton.app %>',
        src: 'views/{,*/}*.html',
        dest: '.tmp/templateCache.js'
      }
    },

    ngconstant: {
      options: {
        name: '<%= skeleton.name %>',
        deps: false,
        wrap: '(function(){\n "use strict"; \n\n {%= __ngModule %} \n\n})();'
      },
      CUSTOMIZE: {
        options: {
          dest: '<%= skeleton.app %>/scripts/autogenerated/bvCustomize.constants.js'
        },
        constants: {
          CUSTOMIZE: grunt.file.readJSON('customize.params.json')
        }
      },
      API_ENDPOINT: {
        options: {
          dest: '<%= skeleton.app %>/scripts/autogenerated/bvApiEndpoint.constants.js'
        },
        constants: {
          API_ENDPOINT: grunt.file.readJSON('apiEndpoint.params.json')
        }
      }
    },

    // ng-annotate tries to make the code safe for minification automatically
    // by using the Angular long form for dependency injection.
    ngAnnotate: {
      dist: {
        files: [{
          expand: true,
          cwd: '.tmp/concat/scripts',
          src: '*.js',
          dest: '.tmp/concat/scripts'
        }]
      }
    },

    jshint: {
      all: {
        src: [
          'Gruntfile.js',
          '<%= skeleton.app %>/{,*/}*.js'
        ]
      }
    },

    // removes link to component library (used only for develop)
    // removes debug code sections in postal payment.
    processhtml: {
      dist: {
        files: {
          '<%= skeleton.dist %>/common/directives/topbar.html': ['<%= skeleton.dist %>/common/directives/topbar.html'],
          '<%= skeleton.dist %>/payments/postal/postal.html': ['<%= skeleton.dist %>/payments/postal/postal.html'],
          '<%= skeleton.dist %>/payments/postal/postalConfirmed.html': ['<%= skeleton.dist %>/payments/postal/postalConfirmed.html'],
          '<%= skeleton.dist %>/payments/postal/postalSummary.html': ['<%= skeleton.dist %>/payments/postal/postalSummary.html']
        }
      }
    },

    i18next: {
      concat: {
        src: ['app/**/i18n'],
        dest: 'app/assets/i18n'
      }
    }
  });

  ///////////////////////
  // OPERAZIONI POSSIBILI
  ///////////////////////

  grunt.registerTask('serve', function (target) {
    grunt.log.warn('---------------------------------------------');
    grunt.log.warn('-                GRUNT SERVE                -');
    grunt.log.warn('---------------------------------------------');
    grunt.task.run([
      'clean:l10n',
      'i18next:concat',
      'clean:server',
      'ngconstant:CUSTOMIZE',
      'ngconstant:API_ENDPOINT',
      'compass:server',
      'postcss:server',
      'wiredep',
      'connect:livereload',
      'watch'
    ]);
  });

  // Build version for production
  grunt.registerTask('build', function () {
    grunt.log.warn('---------------------------------------------');
    grunt.log.warn('-              * GRUNT BUILD *              -');
    grunt.log.warn('---------------------------------------------');
    grunt.task.run([
      'clean:l10n',
      'clean:dist',
      'i18next:concat',
      'wiredep',
      'ngconstant:CUSTOMIZE',
      'ngconstant:API_ENDPOINT',
      'compass:server',
      'postcss',
      'useminPrepare',
      'ngAnnotate',
      'concat',
      'copy:dist',
      'processhtml',
      'cssmin',
      'uglify',
      'usemin',
      'htmlmin'
    ]);
  });

};
