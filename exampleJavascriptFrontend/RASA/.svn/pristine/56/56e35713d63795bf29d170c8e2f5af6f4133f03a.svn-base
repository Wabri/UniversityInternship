(function() {
    'use strict';

    angular
        .module(APP_NAME)
        .service('WindowPopupService', WindowPopupService);

    /* @ngInject */
    function WindowPopupService($interval, $q, $timeout) {

        var self = this;

        // i metodi del servizio
        self.openPopupPromise = openPopupPromise;

        // interne
        var popupBlockerChecker = {
            check: function(popup_window) {
                var _scope = this;
                if (popup_window) {
                    if (/chrome/.test(navigator.userAgent.toLowerCase())) {
                        setTimeout(function() {
                            return _scope._is_popup_blocked(_scope, popup_window);
                        }, 200);
                        popup_window.onload = function() {
                            return _scope._is_popup_blocked(_scope, popup_window);
                        };
                    }
                } else {
                    return _scope._displayError();
                }

                return false
            },
            _is_popup_blocked: function(scope, popup_window) {
                if ((popup_window.innerHeight > 0) === false) {
                    return scope._displayError();
                }
                return false;
            },
            _displayError: function() {
                return true;
            }
        };

        // definizioni locali
        var blocked = null;
        var timer = null;
        var win = null;
        var deferred = null;

        /**
         * openPopup
         */
        function openPopupPromise(url, interval) {

            // aggiusta params
            if (interval === undefined)
                interval = 200;

            // promessa
            deferred = $q.defer();

            // timer
            timer = null;

            // prova apertura
            win = window.open(url);

            // check
            blocked = popupBlockerChecker.check(win);

            // funzione per check
            var checkChild = function() {

                if (blocked) {
                    $interval.cancel(timer);
                    deferred.reject();
                    return true;
                }

                if (win.closed) {
                    $interval.cancel(timer);
                    deferred.resolve();
                    return true;
                }
            };

            // lancia comunque check
            $timeout(function() {
                timer = $interval(checkChild, interval);
            }, 200);

            // torna la promessa
            return deferred.promise;
        }
    }

})();