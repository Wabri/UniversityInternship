(function () {
    'use strict';

    angular.module('revux').directive('autoNumeric', autoNumeric);

    function autoNumeric(DirectiveHandler, $timeout, $document) {

        // Declare a empty options object
        var options = {};
        return {
            // Require ng-model in the element attribute for watching changes.
            require: 'ngModel',
            // This directive only works when used in element's attribute (e.g: cr-numeric)
            restrict: 'A',
            link: function (scope, elm, attrs, controller) {

                var vm = this;

                var options = {};
                //return function (scope, elm, attrs, controller) {

                // Get instance-specific options.
                var opts = angular.extend({}, options, scope.$eval(attrs.autoNumeric));

                var minimumValue = null;
                var maximumValue = null;
                var lastInput;

                //true è tra "" per passaggio da html
                if (opts.deleteMinMaxMethod === undefined)
                    opts.deleteMinMaxMethod = "true";

                if (opts.minimumValue) {
                    minimumValue = opts.minimumValue;
                    if (opts.deleteMinMaxMethod == "true") delete opts.minimumValue;
                }
                if (opts.maximumValue) {
                    maximumValue = opts.maximumValue;
                    if (opts.deleteMinMaxMethod == "true") delete opts.maximumValue;
                }

                // Initialize element as autoNumeric with options.
                $(elm).autoNumeric(opts);

                // metodi da chiamare
                vm.update = function (opts) {

                    //true è tra "" per passaggio da html
                    if (opts.deleteMinMaxMethod === undefined)
                        opts.deleteMinMaxMethod = "true";

                    if (opts.minimumValue) {
                        minimumValue = opts.minimumValue;
                        if (opts.deleteMinMaxMethod == "true") delete opts.minimumValue;
                    }
                    if (opts.maximumValue) {
                        maximumValue = opts.maximumValue;
                        if (opts.deleteMinMaxMethod == "true") delete opts.maximumValue;
                    }

                    // riapplica
                    $timeout(function () {
                        scope.$apply(function () {
                            $(elm).autoNumeric('update', opts);
                            controller.$render();
                        });
                    }, 0);

                };

                // metodi da chiamare
                vm.refresh = function () {

                    // riapplica
                    $timeout(function () {
                        $(elm).autoNumeric('update');

                    }, 0);
                };

                vm.set = function (value) {
                    $timeout(function () {
                        $(elm).autoNumeric('set', value);
                        controller.$setViewValue(value);
                        $(elm).autoNumeric('update');

                    }, 0);
                };

                elm.on('keydown, keypress', function (event) {

                    // apply per 'formare' la cifra
                    $timeout(function () {
                        scope.$apply(function () {

                            // solo se specificato
                            if (!maximumValue) return;

                            // ottiene il valore del campo
                            var unformatted = $(elm).autoNumeric('get');
                            if (unformatted)
                                unformatted = parseFloat(unformatted);

                            // trova eventuali decimali
                            var float_part = ($(elm).autoNumeric('get') + "").split(opts.decimalCharacter)[1];

                            // tronca i decimali
                            unformatted = Math.trunc(unformatted).toString();
                            var max = Math.trunc(maximumValue).toString();

                            // se si supera maxLenght...
                            if (unformatted.length > max.length) {

                                // trasforma in stringhe
                                unformatted = unformatted.toString();
                                max = max.toString();

                                // etrapola il valore da rimettere
                                var newValue = parseFloat(unformatted.substr(0, max.length) + opts.decimalCharacter + float_part);

                                // rimarca il valore formattato
                                $(elm).autoNumeric('set', newValue);

                            } else {
                                controller.$setViewValue(parseFloat(unformatted));
                            }
                        });
                    }, 0);
                });

                // render element as autoNumeric
                controller.$render = function () {
                    if ($.isNumeric(controller.$viewValue))
                        $(elm).autoNumeric('set', controller.$viewValue);
                    else
                        $(elm).autoNumeric('set', '');
                };

                /**
                 * change
                 */
                elm.on('change', function (e) {
                    var unformatted = $(elm).autoNumeric('get');
                    var error = false;

                    // controllo io il minimo ed il massimo
                    if (
                        parseFloat(unformatted) < parseFloat(minimumValue)) {
                        scope.$apply(function () {
                            // alza l'errore
                            controller.$setValidity('min', false);

                            // si, c'è almeno un  errore
                            error = true;
                        });
                    } else
                        scope.$apply(function () {
                            controller.$setValidity('min', true);
                        });

                    if (
                        parseFloat(unformatted) > parseFloat(maximumValue)) {
                        scope.$apply(function () {

                            //$(elm).autoNumeric('set', '');
                            controller.$setValidity('max', false);

                            // si, c'è almeno un  errore
                            error = true;
                        });

                    } else {
                        scope.$apply(function () {
                            controller.$setValidity('max', true);
                        })
                    }

                    // OK
                    if (!error) {

                        scope.$apply(function () {
                            var unformatted = $(elm).autoNumeric('get');

                            // parsa a float
                            if (unformatted)
                                unformatted = parseFloat(unformatted);

                            controller.$setViewValue(unformatted);

                            // rimarca il valore formattato
                            $(elm).autoNumeric('set', unformatted);

                        })
                    }
                });

                // registra la direttiva
                DirectiveHandler.registerDirective(attrs.id, vm);

                // su destroy, distruggi
                scope.$on('destroy', function () {
                    DirectiveHandler.deregisterDirective(attrs.id);
                });


                //}
            } // compile
        } // return
    };

})();