(function() {
    'use strict';

    angular.module('revux').directive('loginSms', loginSms);

    function loginSms() {

        var directive = {
            templateUrl: 'common/directives/login/sms/login.sms.directive.html',
            restrict: 'E',
            controller: controller,
            priority: 500,
            controllerAs: 'ctrl',
            bindToController: true,
            scope: {
                api: "=",
                autoUser: "=",
                showUndoButton: "=",
                canAuth: "=",
                showExtraInfos: "="
            }
        };
        return directive;
    }

    /**
     * controller : controller
     */
    function controller($scope, $timeout, LoginService, LanguageService, AuthenticationService, PropertiesService, PUBLIC_KEY) {

        var vm = this;

        // espone per html
        vm.startup = startup;
        vm.clearUserInserted = clearUserInserted;

        // per padre
        vm.checkCredentials = checkCredentials;
        vm.lastAuth = lastAuth;

        vm.externalAuth = null;

        // locali
        var timeOut = null;
        var regExps = null;
        var crypt = null;
        var setSmsExtraInfo = null;

        // parti di qui
        init()

        /**
         * init
         */
        function init() {

            // definito
            if (vm.api) {

                vm.api.startup = function() {
                    startup();
                };
                vm.api.initialLoginFocus = function() {
                    initialLoginFocus();
                }
                vm.api.setSmsExtraInfo = function(value) {
                    setSmsExtraInfo = value;
                }
                vm.api.setCanAuth = function(value) {
                    vm.externalAuth = value;
                }
                vm.api.setTransactionTokenKey = function(transactionTokenKey) {
                    setTransactionTokenKey(transactionTokenKey);
                };

            }

            // anche subito
            startup();
        }

        /**
         * initialLoginFocus
         */
        function initialLoginFocus() {

            if (!vm.autoUser)
                $timeout(function() {
                    $("#username").focus();
                }, 100)

            else
                $timeout(function() {
                    $("#password").focus();
                }, 100)

        }

        /**
         *
         * @param transactionTokenKey
         */
        function setTransactionTokenKey(transactionTokenKey) {

            if (transactionTokenKey)
                vm.transactionTokenKey = transactionTokenKey;

        }

        /**
         * startup
         */
        function startup() {

            // azzera il timeout di progessione bar
            if (timeOut)
                $timeout.cancel(timeOut);

            // assegna
            vm.externalAuth = (vm.canAuth == undefined) ? true : vm.canAuth;

            // crypt della password
            crypt = new JSEncrypt();
            crypt.setKey(PUBLIC_KEY);

            // configs
            var configs = {
                timeOutSms: 60, // 60 secondi
                cookieLife: 1 // 1 giorno
            };

            // step
            vm.step = 1;
            vm.authBlocked = false;
            vm.authFailed = false;
            vm.lastLogin = null;
            vm.totalBadAttempts = null;
            vm.smsLastDateSend = null;

            // i dati di autorizzazione
            vm.input = {
                username: (vm.autoUser) ? AuthenticationService.getCurrentUser().username : "",
                password: null
            };


            // aggiusta il login sms timeout
            configs.timeOutSms = PropertiesService.properties.loginSmsTimeout;

            // timeout barra
            vm.timeout = {
                remain: configs.timeOutSms,
                time: configs.timeOutSms,
                progress: 0,
                expired: false
            };

            // sms code
            vm.code = {
                value: '',
                failed: false,
                authorized: false
            };

            initialLoginFocus();


            // i patterns per i campi a video
            LoginService.loginPatterns().then(
                function(response) {

                    // prepara i valori
                    regExps = {};
                    angular.forEach(response, function(val, key) {
                        regExps[key] = val;
                    })

                    // per validazione campi
                    vm.userMinLength = regExps['userMinLength'];
                    vm.userMaxLength = regExps['userMaxLength'];

                    vm.pwdMinLength = regExps["pwdMinLength"];
                    vm.pwdMaxLength = regExps["pwdMaxLength"];

                    vm.pwdNewMinLength = regExps["maxNewPasswordLength"];
                    vm.pwdNewMaxLength = regExps["minNewPasswordLength"];

                    vm.codeMinLength = regExps['smsMinLength'];
                    vm.codeMaxLength = regExps['smsMaxLength'];

                    vm.userValidator = (function() {
                        var regexp = new RegExp(regExps["userName"])
                        return {
                            test: function(value) {
                                return regexp.test(value);
                            }
                        };
                    })();
                    vm.passwordValidator = (function() {
                        var regexp = new RegExp(regExps["password"]); ///^[a-zA-Z0-9]{0,20}$/
                        return {
                            test: function(value) {
                                return regexp.test(value);
                            }
                        };
                    })();
                    vm.newPasswordValidator = (function() {
                        var regexp = new RegExp(regExps["newPassword"]); ///^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]{6,20}$/

                        return {
                            test: function(value) {
                                return regexp.test(value);
                            }
                        };
                    })();
                    vm.smsValidator = (function() {
                        var regexp = new RegExp(regExps["smsCode"]); ///^[0-9]{1,6}$/
                        return {
                            test: function(value) {
                                return regexp.test(value);
                            }
                        };
                    })();

                }
            )
        }

        // authBasicStep2 : step 2 su autenticazione basic
        function checkCredentials() {

            /**
             * decodeStep1Response : common response for step 1
             * @param response
             * @returns {boolean}
             */
            function decodeCheckCredentialsResponse(response) {

                // salva
                var responseCheckCredentials = response;

                //console.log(responseCheckCredentials);

                // non trovato...
                if (responseCheckCredentials.authStatus.flowStatus == "usernameNotFound") {

                    vm.authBlocked = true;
                    vm.input.username = (vm.autoUser) ? AuthenticationService.getCurrentUser().username : "",
                        vm.input.password = "";

                    // sempre sul primo campo
                    initialLoginFocus();

                    return false;
                }

                // bad credentials...
                if (responseCheckCredentials.authStatus.flowStatus == "badCredentials") {

                    vm.authFailed = true;
                    vm.input.username = (vm.autoUser) ? AuthenticationService.getCurrentUser().username : "",
                        vm.input.password = "";

                    // sempre sul primo campo
                    initialLoginFocus();

                    return false;
                }

                // autorizzato, avanti a step successivo
                if (responseCheckCredentials.authStatus.flowStatus == "mobileReauthToken") {

                    LoginService.userInfo(vm.input.username).then(
                        function(response) {

                            var responseUserInfo = response;

                            // focus sul campo OTP / TOKEN
                            //focus('code');
                            $timeout(function() {
                                $("#code").focus();
                            }, 100)


                            // informazione ultimo accesso
                            vm.lastLogin = responseUserInfo.lastLogin; //date.toString();
                            vm.totalBadAttempts = parseInt(responseUserInfo.totalBadAttempts);

                            // data ultimo sms
                            vm.smsLastDateSend = responseCheckCredentials.authStatus.smsDate;

                            // step 2
                            vm.step = 2;

                            // funzione di timeout ogni secondo
                            var onTimeout = function() {

                                // comincia a confrontare...
                                if (vm.timeout.progress < vm.timeout.time) {

                                    // aumenta il contatore
                                    vm.timeout.progress = vm.timeout.progress + 1;

                                    // per timeout
                                    vm.timeout.remain = (vm.timeout.time - vm.timeout.progress);

                                    // riparte con la funzione
                                    timeOut = $timeout(onTimeout, 1000);

                                    return true;

                                } else {

                                    // expired
                                    vm.timeout.expired = true;

                                    // azzera per la barra
                                    vm.timeout.progress = 0;

                                    return false;
                                }
                            }

                            // parte da qui

                            timeOut = $timeout(onTimeout, 1000); // ogni secondo

                            return true;
                        })

                } //  a qui
            }

            // copia la struttura
            var flds = angular.copy(vm.input);
            flds.smsMessage = null;

            // encrypt password
            flds.password = crypt.encrypt(flds.password);

            // c'e extra info per sms ???
            if (setSmsExtraInfo != null) {
                flds.smsMessage = "\n";

                if (setSmsExtraInfo.type)
                    flds.smsMessage = flds.smsMessage + setSmsExtraInfo.type + "\n";
                if (setSmsExtraInfo.amount)
                    flds.smsMessage = flds.smsMessage + setSmsExtraInfo.amount + "\n";
                if (setSmsExtraInfo.creditAccount)
                    flds.smsMessage = flds.smsMessage + setSmsExtraInfo.creditAccount + "\n";
                if (setSmsExtraInfo.beneficiaryBank)
                    flds.smsMessage = flds.smsMessage + setSmsExtraInfo.beneficiaryBank + "\n";
            }

            // invoka il servizio
            LoginService.loginReauthMobileFirstStep(flds).then(
                function(response) {

                    // common
                    decodeCheckCredentialsResponse(response);

                });
        }

        /**
         * lastAuth: ultima login in step
         */
        function lastAuth() {

            /**
             * lastAuth
             * @param response
             */
            function decodeLastAuthResponse(response) {

                //console.log("response = ", response);

                if (response.authStatus.auth == true) {

                    // avverte il padre che è tutto OK
                    vm.api.authenticated();

                    // rimette tutto a posto
                    //startup();

                } else if (response.authStatus.flowStatus == "newPasswordRequired" || response.authStatus.flowStatus == "newTokenPasswordRequired") {

                    // TODO

                    // primo campo disponibile
                    $timeout(function() {
                        $("#password").focus();
                    }, 100)

                } else if (response.authStatus.flowStatus == "badCredentialsOtp" || response.authStatus.flowStatus == "badCredentialsToken") {

                    // errore OTP
                    vm.code.failed = true;

                } else {

                    // errore generico
                    vm.code.failed = true;
                }
            }

            // provo il secondo step
            LoginService.loginReauthMobileSecondStep(vm.code.value, vm.transactionTokenKey).then(
                function(response) {

                    decodeLastAuthResponse(response);

                })
        }

        /**
         * clearUserInserted
         */
        function clearUserInserted() {
            vm.authFailed = false;
            vm.authBlocked = false;
        }
    };

}());