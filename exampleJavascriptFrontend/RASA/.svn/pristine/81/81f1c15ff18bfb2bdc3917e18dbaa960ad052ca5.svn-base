(function() {
  "use strict";

  angular.module(APP_NAME).directive("webcamCaptureNoIos", webcamCaptureNoIos);

  /**
   * bvWait : direttiva di attesa
   */
  function webcamCaptureNoIos() {
    var directive = {
      restrict: "E",

      controller: controller,
      templateUrl: "common/directives/webcamCaptureNoIos/webcamCaptureNoIos.directive.html"
    };

    return directive;
  }


  /**
   *
   */
  function controller($scope, $rootScope, $q, $mdDialog, $timeout, EVENTS) {

    $scope.makeSnapshot = makeSnapshot;

    $scope.captured = false;

    var _video = null,
      patData = null;

    $scope.patOpts = {
      x: 0,
      y: 0,
      w: 25,
      h: 25
    };

    // Setup a channel to receive a video property
    // with a reference to the video element
    // See the HTML binding in main.html
    $scope.channel = {};

    $scope.webcamError = false;
    $scope.onError = onError;

    function onError(err) {
      $scope.$apply(
        function() {
          $scope.webcamError = err;
        }
      );
    };
    $scope.onSuccess = onSuccess;

    function onSuccess() {
      // The video element contains the captured camera data
      _video = $scope.channel.video;
      $scope.$apply(function() {
        $scope.patOpts.w = _video.width;
        $scope.patOpts.h = _video.height;
        //$scope.showDemos = true;
      });
    };

    $scope.onStream = onStream;

    function onStream(stream) {
      // You could do something manually with the stream.
    };

    function makeSnapshot() {
      if (_video) {
        var patCanvas = document.querySelector('#snapshot');
        if (!patCanvas) return;

        patCanvas.width = _video.width;
        patCanvas.height = _video.height;
        var ctxPat = patCanvas.getContext('2d');
        var idata = getVideoData($scope.patOpts.x, $scope.patOpts.y, $scope.patOpts.w, $scope.patOpts.h);
        ctxPat.putImageData(idata, 0, 0);

        $scope.sendSnapshotToServer(patCanvas.toDataURL());

        patData = idata;
        $scope.captured = true;
      }
    };


    /**
     * Redirect the browser to the URL given.
     * Used to download the image by passing a dataURL string
     */
    $scope.downloadSnapshot = downloadSnapshot;

    function downloadSnapshot(dataURL) {
      window.location.href = dataURL;
    };

    $scope.getVideoData = getVideoData;

    function getVideoData(x, y, w, h) {
      var hiddenCanvas = document.createElement('canvas');
      hiddenCanvas.width = _video.width;
      hiddenCanvas.height = _video.height;
      var ctx = hiddenCanvas.getContext('2d');
      ctx.drawImage(_video, 0, 0, _video.width, _video.height);
      return ctx.getImageData(x, y, w, h);
    };

    /**
     * This function could be used to send the image data
     * to a backend server that expects base64 encoded images.
     *
     * In this example, we simply store it in the scope for display.
     */
    $scope.sendSnapshotToServer = sendSnapshotToServer;

    function sendSnapshotToServer(imgBase64) {
      $scope.snapshotData = imgBase64;
    };


    /////////////////////////////////////////////////////////
    $scope.downloadCanvas = downloadCanvas;

    function downloadCanvas(link, canvasId, filename) {
      link.href = document.getElementById('snapshot').toDataURL();
      link.download = filename;
    }

    /**
     * The event handler for the link's onclick event. We give THIS as a
     * parameter (=the link element), ID of the canvas and a filename.
     */
    document.getElementById('download').addEventListener('click', function() {
      $scope.downloadCanvas(this, 'canvas', 'test.png');
    }, false);

    ////////////////////////////////////////////////

  }



})();
