(function () {
    'use strict';

    angular.module('revux').directive('loginToken', loginToken);

    function loginToken() {

        var directive = {
            templateUrl: 'common/directives/login/token/login.token.directive.html',
            restrict: 'E',
            controller: controller,
            controllerAs: 'ctrl',
            priority: 500,
            bindToController: true,
            scope: {
                api: "=",
                autoUser: "=",
                showUndoButton: "=",
                canAuth: "="
            }
        };
        return directive;
    }

    /**
     * controller : controller
     */
    function controller($scope, $timeout, LoginService, LanguageService, AuthenticationService, PUBLIC_KEY) {

        var vm = this;
        //vm.api = {};

        // espone per html
        vm.startup = startup;


        // per padre
        vm.checkCredentials = checkCredentials;
        vm.lastAuth = lastAuth;

        vm.clearUserInserted = clearUserInserted;

        var timeOut = null;
        var regExps = null;
        var crypt = null;

        // parti di qui
        init()

        /**
         * init
         */
        function init() {

            //console.log("SONO IN INIT = TOKEN");

            // definito
            if (vm.api) {

                vm.api.startup = function () {
                    startup();
                };
                vm.api.initialLoginFocus = function () {
                    initialLoginFocus();
                }
                vm.api.setCanAuth = function (value) {
                    //console.log("ECCOMI TOKEN = ", value)
                    vm.externalAuth = value;
                }
                vm.api.setTransactionTokenKey = function (transactionTokenKey) {
                    setTransactionTokenKey(transactionTokenKey);
                };

            }

            // anche subito
            startup();
        }

        /**
         * initialLoginFocus
         */
        function initialLoginFocus() {

            if (!vm.autoUser)
                $timeout(function () {
                    $("#username").focus();
                }, 100)

            else
                $timeout(function () {
                    $("#password").focus();
                }, 100)

        }

        function setTransactionTokenKey(transactionTokenKey) {

            if (transactionTokenKey)
                vm.transactionTokenKey = transactionTokenKey;

        }

        /**
         * startup
         */
        function startup() {

            //assegna
            vm.externalAuth = (vm.canAuth == undefined) ? true : vm.canAuth;

            //console.log("STARTUP = ",  vm.externalAuth, vm.canAuth);

            // crypt della password
            crypt = new JSEncrypt();
            crypt.setKey(PUBLIC_KEY);

            // step
            vm.step = 1;
            vm.authBlocked = false;
            vm.authFailed = false;
            vm.lastLogin = null;
            vm.totalBadAttempts = null;

            // i dati di autorizzazione
            vm.input = {
                username: (vm.autoUser) ? AuthenticationService.getCurrentUser().username : "",
                password: null
            };

            // token code
            vm.code = {
                value: '',
                failed: false,
                authorized: false
            };

            // i patterns per i campi a video
            LoginService.loginPatterns().then(
                function (response) {

                    // prepara i valori
                    regExps = {};
                    angular.forEach(response, function (val, key) {
                        regExps[key] = val;
                    })

                    // ----------------------------------------------------
                    // definisce solo adesso le interfacce per i validatori
                    // ----------------------------------------------------

                    vm.userMinLength = regExps['userMinLength'];
                    vm.userMaxLength = regExps['userMaxLength'];

                    vm.pwdMinLength = regExps["pwdMinLength"];
                    vm.pwdMaxLength = regExps["pwdMaxLength"];

                    vm.pwdNewMinLength = regExps["maxNewPasswordLength"];
                    vm.pwdNewMaxLength = regExps["minNewPasswordLength"];

                    vm.tokenMinLength = regExps['tokenMinLength'];
                    vm.tokenMaxLength = regExps['tokenMaxLength'];

                    vm.userValidator = (function () {
                        var regexp = new RegExp(regExps["userName"])
                        return {
                            test: function (value) {
                                return regexp.test(value);
                            }
                        };
                    })();
                    vm.passwordValidator = (function () {
                        var regexp = new RegExp(regExps["password"]); ///^[a-zA-Z0-9]{0,20}$/
                        return {
                            test: function (value) {
                                return regexp.test(value);
                            }
                        };
                    })();
                    vm.newPasswordValidator = (function () {
                        var regexp = new RegExp(regExps["newPassword"]); ///^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]{6,20}$/

                        return {
                            test: function (value) {
                                return regexp.test(value);
                            }
                        };
                    })();
                    vm.tokenValidator = (function () {
                        var regexp = new RegExp(regExps["tokenCode"]); ///^[0-9]{1,8}$/
                        return {
                            test: function (value) {
                                return regexp.test(value);
                            }
                        };
                    })();
                }
            )
        }

        // authBasicStep2 : step 2 su autenticazione basic
        function checkCredentials() {

            /**
             * decodeStep1Response : common response for step 1
             * @param response
             * @returns {boolean}
             */
            function decodeCheckCredentialsResponse(response) {

                // salva
                var responseCheckCredentials = response;

                console.log(responseCheckCredentials);

                // non trovato...
                if (responseCheckCredentials.authStatus.flowStatus == "usernameNotFound") {

                    vm.authBlocked = true;
                    vm.input.username = (vm.autoUser) ? AuthenticationService.getCurrentUser().username : "";
                    vm.input.password = "";

                    // sempre sul primo campo
                    initialLoginFocus();

                    return false;
                }

                // bad credentials...
                if (responseCheckCredentials.authStatus.flowStatus == "badCredentials") {

                    vm.authFailed = true;
                    vm.input.username = (vm.autoUser) ? AuthenticationService.getCurrentUser().username : "";
                    vm.input.password = "";

                    // sempre sul primo campo
                    initialLoginFocus();

                    return false;
                }

                // autorizzato, avanti a step successivo
                if (responseCheckCredentials.authStatus.flowStatus == "tokenReauthToken") {

                    $timeout(function () {
                        $("#code").focus();
                    }, 100)

                    vm.step = 2;

                    return true;
                }
            }

            // copia la struttura
            var flds = angular.copy(vm.input);

            // encrypt password
            flds.password = crypt.encrypt(flds.password);

            // invoka il servizio
            LoginService.loginReauthTokenFirstStep(flds).then(
                function (response) {

                    // common
                    decodeCheckCredentialsResponse(response);

                });
        }

        /**
         * lastAuth: ultima login in step
         */
        function lastAuth() {

            /**
             * lastAuth
             * @param response
             */
            function decodeLastAuthResponse(response) {

                //console.log("response = ", response);

                if (response.authStatus.auth == true) {

                    // avverte il padre che Ã¨ tutto OK
                    vm.api.authenticated();

                    // rimette tutto a posto
                    //startup();

                } else if (response.authStatus.flowStatus == "newPasswordRequired" || response.authStatus.flowStatus == "newTokenPasswordRequired") {

                    // TODO

                    // primo campo disponibile
                    $timeout(function () {
                        $("#password").focus();
                    }, 100)

                } else if (response.authStatus.flowStatus == "badCredentialsOtp" || response.authStatus.flowStatus == "badCredentialsToken") {

                    // errore OTP
                    vm.code.failed = true;

                } else {

                    // errore generico
                    vm.code.failed = true;
                }
            }

            // provo il secondo step
            LoginService.loginReauthTokenSecondStep(vm.code.value, vm.transactionTokenKey).then(
                function (response) {

                    decodeLastAuthResponse(response);

                })
        }

        /**
         * clearUserInserted
         */
        function clearUserInserted() {
            vm.authFailed = false;
            vm.authBlocked = false;
        }


    };

}());
