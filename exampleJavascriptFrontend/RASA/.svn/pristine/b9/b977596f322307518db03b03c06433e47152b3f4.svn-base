(function () {
    'use strict';

    angular.module('revux').directive('password.custom', passwordCustomer);

    function passwordCustomer($compile, $timeout) {
        return {
            restrict: 'A',
            require: 'ngModel',
            link: function (scope, element, attrs, controller) {


                var maskedInputElement;

                scope.passwordValidator = function () {

                    if (!maskedInputElement || !maskedInputElement.length) return false;

                    var regexp = new RegExp('^[a-zA-Z0-9]{0,20}$'); ///^[a-zA-Z0-9]{0,20}$/
                    return {
                        test: function (value) {
                            return regexp.test(value);
                        }
                    };
                };

                var maskValue = function (value) {
                    // replace all characters with the mask character
                    return (value || "").replace(/./g, "\u2022");
                };
                var createMaskedInputElement = function () {
                    if (!maskedInputElement || !maskedInputElement.length) {

                        maskedInputElement = element.clone(false);
                        maskedInputElement.attr("type", "password"); // ensure the value is masked
                        maskedInputElement.removeAttr("name"); // ensure the password save prompt won't show
                        maskedInputElement.removeAttr("password.custom"); // ensure an infinite loop of clones isn't created
                        maskedInputElement.bind("blur", function () {
                            maskedInputElement.remove();
                            maskedInputElement = null;
                            element.removeClass("ng-hide");
                        });
                        //debugger;
                        maskedInputElement.removeAttr("ng-pattern");
                        maskedInputElement.attr("ng-pattern", 'passwordValidator()');
                        element.after(maskedInputElement);
                        $compile(element)(scope);
                        $compile(maskedInputElement)(scope);
                    }
                };

                /**
                 * focus : parte tutto da qui
                 */
                element.bind("focus", function () {

                    // crea il campo gemello
                    createMaskedInputElement();

                    // rende hide il campo 'primario'
                    element.addClass("ng-hide");

                    // d√† il focus al nuovo campo
                    maskedInputElement[0].focus();

                    // seleziona il testo
                    $timeout(function () {
                        maskedInputElement[0].select();
                    }, 0)

                });

                /**
                 * formazztazioni
                 */
                controller.$formatters.push(function (value) {
                    // ensure the displayed value is still masked when the clone is hidden
                    return maskValue(value);
                });
            }
        };
    }
})();

