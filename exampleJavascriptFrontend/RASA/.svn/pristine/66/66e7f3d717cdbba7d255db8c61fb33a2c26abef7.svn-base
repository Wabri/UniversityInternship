/**
 * homepageCtrl : controller home page
 * @type {[type]}
 */
angular.module(APP_NAME)
  .controller('operativeSitesCtrl', operativeSitesCtrl);

/**
 * [homepageCtrl description]
 * @method operativeSitesCtrl
 * @param  {[type]}     EVENTS [description]
 * @return {[type]}            [description]
 */
function operativeSitesCtrl($scope, $rootScope, $q, $timeout, $http, $mdDialog, bvApiService, bvAlertService, bvBusyService, EVENTS, $translate) {

  // bp
  var vm = this;
  vm.project = {

  };
  vm.data = {};
  vm.data.cb1 = true;
  vm.data.cb2 = false;
  vm.data.cb3 = false;
  vm.data.cb4 = false;
  vm.data.cb5 = false;
  vm.data.cb6 = false;

  vm.dataCollapse = {};
  vm.dataCollapse.cb1 = true;
  vm.dataCollapse.cb2 = false;
  vm.dataCollapse.cb3 = false;
  vm.dataCollapse.cb4 = false;
  vm.dataCollapse.cb5 = false;
  vm.dataCollapse.cb6 = false;
  vm.dataCollapse.cb7 = false;
  vm.dataCollapse.cb8 = false;

  vm.dataTriage = {};
  vm.dataTriage.cb1 = true;
  vm.dataTriage.cb2 = false;
  vm.dataTriage.cb3 = false;
  vm.dataTriage.cb4 = false;
  vm.dataTriage.cb5 = false;
  vm.dataTriage.cb6 = false;

  // $(document).ready(function(){
  //
  //     var lines = 5;
  //     var linesUsed = $('#linesUsed');
  //
  //     $('#countMe').keydown(function(e) {
  //
  //         newLines = $(this).val().split("\n").length;
  //         linesUsed.text(newLines);
  //
  //         if(e.keyCode == 13 && newLines >= lines) {
  //             linesUsed.css('color', 'red');
  //             return false;
  //         }
  //         else {
  //             linesUsed.css('color', '');
  //         }
  //     });
  // });




}


angular.module(APP_NAME).directive('maxlines', function() {
  return {
    restrict: 'A',
    require: 'ngModel',
    link: function(scope, elem, attrs, ngModel) {
      var maxLines = 1;
      attrs.$observe('maxlines', function(val) {
        maxLines = parseInt(val);
      });
      ngModel.$validators.maxlines = function(modelValue, viewValue) {
        var numLines = (modelValue || '').split("\n").length;
        return numLines <= maxLines;
      };
      attrs.$observe('maxlinesPreventEnter', function(preventEnter) {
        // if attribute value starts with 'f', treat as false. Everything else is true
        preventEnter = (preventEnter || '').toLocaleLowerCase().indexOf('f') !== 0;
        if (preventEnter) {
          addKeypress();
        } else {
          removeKeypress();
        }
      });

      function addKeypress() {
        elem.on('keypress', function(event) {
          // test if adding a newline would cause the validator to fail
          if (event.keyCode == 13 && !ngModel.$validators.maxlines(ngModel.$modelValue + '\n', ngModel.$viewValue + '\n')) {
            event.preventDefault();
          }
        });
      }

      function removeKeypress() {
        elem.off('.maxlines');
      }

      scope.$on('$destroy', removeKeypress);
    }
  };
});
