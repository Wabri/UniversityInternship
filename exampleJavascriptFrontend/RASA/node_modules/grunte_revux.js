
module.exports = function (grunt) {
  // Load grunt tasks automatically
  require("load-grunt-tasks")(grunt);
  grunt.loadNpmTasks("grunt-contrib-jshint");
  grunt.loadNpmTasks("grunt-wiredep");
  grunt.loadNpmTasks("grunt-processhtml");
  grunt.loadNpmTasks("grunt-i18next");

  var config = {
    app: "app",
    dist: "dist"
  };
  var serveStatic = require("serve-static");

  // Define the configuration for all the tasks
  grunt.initConfig({
    // Project settings

    revux: config,
    // Watches files for changes and runs tasks based on the changed files
    watch: {
      concatTranslate: {
        files: ["<%= revux.app %>/**/i18n/*.json"],
        tasks: ["clean:l10n", "i18next:concat"]
      },
      bower: {
        files: ["bower.json"],
        tasks: ["wiredep"]
      },
      gruntfile: {
        files: ["Gruntfile.js"]
      },
      compass: {
        files: ["<%= revux.app %>/**/*.{scss,sass}"],
        tasks: ["compass:server", "postcss:server"]
      },
      livereload: {
        options: {
          livereload: "<%= connect.options.livereload %>"
        },
        files: [
          "<%= revux.app %>/**/*.html",
          "<%= revux.app %>/**/*.js",
          ".tmp/styles/{,*/}*.css",
          "<%= revux.app %>/images/{,*/}*"
        ]
      }
    },

    // The actual grunt server settings
    connect: {
      options: {
        port: 9001,
        livereload: 35728,
        hostname: "0.0.0.0"
      },
      livereload: {
        options: {
          open: true,
          //base: [
          //   '.tmp',
          //  '<%= revux.app %>'
          //],
          middleware: function (connect, options) {
            return [
              serveStatic(".tmp"),
              connect().use(
                "/bower_components",
                serveStatic("./bower_components")
              ),
              serveStatic(config.app)
            ];
          }
        }
      }
    },
    /**************  EXTRA OPTIONS  *************/
    // Empties folders to start fresh
    clean: {
      dist: {
        files: [
          {
            dot: true,
            src: [".tmp", "<%= revux.dist %>/*"]
          }
        ]
      },
      server: ".tmp",
      l10n: "app/l10n/*.json"
    },
    // add Bower installed files into index.html
    wiredep: {
      app: {
        src: ["<%= revux.app %>/index.html"]
      },
      sass: {
        src: ["<%= revux.app %>/styles/{,*/}*.{scss,sass}"],
        ignorePath: /(\.\.\/){1,2}bower_components\//
      }
    },
    // Compiles Sass to CSS and generates necessary files if requested
    compass: {
      options: {
        sassDir: "<%= revux.app %>/styles",
        cssDir: ".tmp/styles",
        generatedImagesDir: ".tmp/images/generated",
        imagesDir: "<%= revux.app %>/images",
        javascriptsDir: "<%= revux.app %>/scripts",
        fontsDir: "<%= revux.app %>/styles/fonts",
        importPath: "./bower_components",
        httpImagesPath: "/images",
        httpGeneratedImagesPath: "/images/generated",
        httpFontsPath: "/styles/fonts",
        relativeAssets: false,
        assetCacheBuster: false,
        raw: "Sass::Script::Number.precision = 10\n"
      },
      dist: {
        options: {
          generatedImagesDir:
            "<%= revux.dist %>/images/generated"
        }
      },
      server: {
        options: {
          sourcemap: true
        }
      }
    },
    // Add vendor prefixed styles
    postcss: {
      options: {
        processors: [
          require("autoprefixer")({
            browsers: ["last 1 version"]
          })
        ]
      },
      server: {
        options: {
          map: true
        },
        files: [
          {
            expand: true,
            cwd: ".tmp/styles/",
            src: "{,*/}*.css",
            dest: ".tmp/styles/"
          }
        ]
      },
      dist: {
        files: [
          {
            expand: true,
            cwd: ".tmp/styles/",
            src: "{,*/}*.css",
            dest: ".tmp/styles/"
          }
        ]
      }
    },

    // If you want to turn on uglify you will need write your angular code with string-injection based syntax
    // For example this is normal syntax: function exampleCtrl ($scope, $rootScope, $location, $http){}
    // And string-injection based syntax is: ['$scope', '$rootScope', '$location', '$http', function exampleCtrl ($scope, $rootScope, $location, $http){}]
    uglify: {
      options: {
        mangle: false,
        compress: {
          //pure_funcs: [ 'console.log' ]
        }
      }
    },

    // Reads HTML for usemin blocks to enable smart builds that automatically
    // concat, minify and revision files. Creates configurations in memory so
    // additional tasks can operate on them
    useminPrepare: {
      html: "<%= revux.app %>/index.html",
      options: {
        dest: "<%= revux.dist %>"
      }
    },

    // Performs rewrites based on filerev and the useminPrepare configuration
    usemin: {
      html: ["<%= revux.dist %>/{,*/}*.html"],
      css: ["<%= revux.dist %>/styles/{,*/}*.css"],
      js: ["<%= revux.dist %>/scripts/{,*/}*.js"],
      options: {
        assetsDirs: [
          "<%= revux.dist %>",
          "<%= revux.dist %>/images",
          "<%= revux.dist %>/styles"
        ],
        patterns: {
          js: [
            [
              /(images\/[^''""]*\.(png|jpg|jpeg|gif|webp|svg))/g,
              "Replacing references to images"
            ]
          ]
        },
        blockReplacements: {
          css: function (block) {
            return (
              '<link rel="stylesheet" href="' +
              block.dest +
              "?v=" +
              grunt.template.today("isoDateTime") +
              '"></link>'
            );
          },
          js: function (block) {
            return (
              '<script src="' +
              block.dest +
              "?v=" +
              grunt.template.today("isoDateTime") +
              '"></script>'
            );
          }
        }
      }
    },

    // Copies remaining files to places other tasks can use
    copy: {
      dist: {
        files: [
          {
            expand: true,
            dot: true,
            cwd: "<%= revux.app %>",
            dest: "<%= revux.dist %>",
            src: [
              "*.{ico,png,txt}",
              "**/*.html",
              "{,*/}{,*/}*.json",
              //'!**/library/**',
              "fonts/{,*/}*.*",
              "images/**/*.*"
            ]
          },
          {
            expand: true,
            cwd: ".tmp/images",
            dest: "<%= revux.dist %>/images",
            src: ["generated/*"]
          }
        ]
      },
      dist_awesome: {
        files: [
          {
            expand: true,
            dot: true,
            cwd:
              "<%= revux.app %>/../bower_components/font-awesome/fonts",
            dest: "<%= revux.dist %>/fonts/", // Font Awesome copy hack
            src: [
              "{,*/}*.*"
            ]
          }
        ]
      },

      styles: {
        expand: true,
        cwd: "<%= revux.app %>/styles",
        dest: ".tmp/styles/",
        src: "{,*/}*.css"
      },

      alternate: {
        nonull: true,
        expand: true,
        flatten: true,
        src: ".tmp/concat/scripts/*",
        dest: "<%= revux.dist %>/scripts"
      },

      env_params_app: {
        src: "env_params.json",
        dest: "<%= revux.app %>/env_params.json"
      },
      env_params_dist: {
        src: "env_params.json",
        dest: "<%= revux.dist %>/env_params.json"
      },
      i18n_dist: {
        expand: true,
        cwd: "app",
        src: "I18n/*",
        dest: "<%= revux.dist %>/"
      }
    },

    htmlmin: {
      dist: {
        options: {
          collapseWhitespace: true,
          conservativeCollapse: true,
          collapseBooleanAttributes: true,
          removeCommentsFromCDATA: true
        },
        files: [
          {
            expand: true,
            cwd: "<%= revux.dist %>",
            src: ["{,*/}{,*/}*.html"],
            dest: "<%= revux.dist %>"
          }
        ]
      }
    },

    ngtemplates: {
      dist: {
        options: {
          module: "revux",
          htmlmin: "<%= htmlmin.dist.options %>",
          usemin: "scripts/scripts.js"
        },
        cwd: "<%= revux.app %>",
        src: "views/{,*/}*.html",
        dest: ".tmp/templateCache.js"
      }
    },

    ngconstant: {
      options: {
        name: "api_endpoint",
        //dest: 'config.js',
        constants: {
          API_ENDPOINT: grunt.file.readJSON(
            "env_params.json"
          )
        },
        values: {
          debug: true
        }
      },
      build: {
        options: {
          dest: "app/common/apiEndpoint.js"
        }
      }
    },

    // ng-annotate tries to make the code safe for minification automatically
    // by using the Angular long form for dependency injection.
    ngAnnotate: {
      dist: {
        files: [
          {
            expand: true,
            cwd: ".tmp/concat/scripts",
            src: "*.js",
            dest: ".tmp/concat/scripts"
          }
        ]
      }
    },

    //jshint: {
    //    all: ['<%= revux.app %>/common/{,*/}*.js']
    //}
    jshint: {
      all: {
        src: ["Gruntfile.js", "<%= revux.app %>/{,*/}*.js"]
      }
    },

    // removes link to component library (used only for develop)
    // removes debug code sections in postal payment.
    processhtml: {
      dist: {
        files: {
          "<%= revux.dist %>/common/directives/topbar.html": [
            "<%= revux.dist %>/common/directives/topbar.html"
          ],
          "<%= revux.dist %>/payments/postal/postal.html": [
            "<%= revux.dist %>/payments/postal/postal.html"
          ],
          "<%= revux.dist %>/payments/postal/postalConfirmed.html": [
            "<%= revux.dist %>/payments/postal/postalConfirmed.html"
          ],
          "<%= revux.dist %>/payments/postal/postalSummary.html": [
            "<%= revux.dist %>/payments/postal/postalSummary.html"
          ]
        }
      }
    },
    i18next: {
      concat: {
        src: ["app/**/i18n"],
        dest: "app/l10n"
      }
    }
  });

  grunt.registerTask("serve", function (target) {
    grunt.log.warn(
      "---------------------------------------------"
    );
    grunt.log.warn(
      "-                GRUNT SERVE                -"
    );
    grunt.log.warn(
      "---------------------------------------------"
    );
    grunt.task.run([
      "clean:l10n",
      "i18next:concat",
      "clean:server",
      "wiredep",
      "ngconstant:build",
      "copy:env_params_app",
      "compass:server",
      "postcss:server",
      //'jshint',
      "connect:livereload",
      "watch"
    ]);
  });

  // Build version for production
  grunt.registerTask("build", function () {
    grunt.log.warn(
      "---------------------------------------------"
    );
    grunt.log.warn(
      "-              * GRUNT BUILD *              -"
    );
    grunt.log.warn(
      "---------------------------------------------"
    );
    grunt.task.run([
      "clean:l10n",
      "i18next:concat",
      "clean:dist",
      "wiredep",
      "ngconstant:build",
      "compass:server",
      "postcss",
      "useminPrepare",
      "ngAnnotate",
      "concat",
      "copy:dist",
      "copy:dist_awesome",
      "processhtml",
      "cssmin",
      "uglify",
      "usemin",
      "htmlmin",
      "copy:env_params_dist",
      "copy:i18n_dist"
    ]);
  });
};


